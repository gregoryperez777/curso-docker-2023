version: '3'


services:
  
  # contruir la imagen del dockerfile 
  # en el docker-compose
  app:

    build:
      # context -> donde quiero que busque el Dockerfile
      context: .

      # target -> especifica el stage a ejecutar el cual esta nombrado en el dockerfile y 
      # se puede usar target solo cuando trabajamos con multi-stage
      target: ${STAGE}
      # dockerfile -> se puede cambiar el nombre del Dockerfile por default es Dockerfile
      dockerfile: Dockerfile

    # command: yarn start:dev
    volumes:
      # Bind del file system local del proyecto con el file system del contenedor
      # Recuerda que esto indica que cualquier cambio en alguna de las partes se refleja
      # en la otra
      - .:/app
      # Volumen anonimo
      # mapea el contenido del host que no es nada con este directorio en particular del lado del contenedor
      # en resumen es como hacer esto
      # :/app/node_modules
      - /app/node_modules
    container_name: nest-app
    ports:
      - ${PORT}:${PORT}

    # Definimos las variables de entornos porque en el
    # Dockerfile no las copiamos por ende no existen 
    # en la imagen

    environment:
      APP_VERSION: ${APP_VERSION}
      STAGE: ${STAGE}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      PORT: ${PORT}
      HOST_API: ${HOST_API}
      JWT_SECRET: ${JWT_SECRET}  
  
  db:
    image: postgres:14.3
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    container_name: ${DB_NAME}
    volumes:
      - postgres-db:/var/lib/postgresql/data


volumes:
  postgres-db:
    external: false

# Nota importante 
# Utilizar docker compose build para construir o reconstruir servicio
# sino usar 
# docker compose down --> detiene y remueve los contenedore y redes
# docker compose down --volumes --> detiene y remueves los contenedore redes y volumenes 